{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/code-prettify/src/prettify.js","src/js/admin.script.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","win","FLOW_CONTROL_KEYWORDS","COMMON_KEYWORDS","CPP_KEYWORDS","JAVA_KEYWORDS","CSHARP_KEYWORDS","PERL_KEYWORDS","PYTHON_KEYWORDS","RUBY_KEYWORDS","C_TYPES","PR_STRING","PR_COMMENT","PR_TYPE","PR_LITERAL","PR_PUNCTUATION","PR_PLAIN","PR_SOURCE","PR_ATTRIB_VALUE","notWs","decorateSource","langHandlerRegistry","PR","combinePrefixPatterns","regexs","capturedGroupIndex","needToFoldCase","ignoreCase","regex","test","source","replace","escapeCharToCodeUnit","b","v","decodeEscape","charsetPart","cc0","charCodeAt","c1","charAt","parseInt","substring","encodeEscape","charCode","toString","ch","String","fromCharCode","allowAnywhereFoldCaseAndRenumberGroups","parts","match","RegExp","capturedGroups","groupIndex","decimalValue","ch0","charSet","charsetParts","ranges","inverse","out","push","end","start","Math","max","min","sort","consolidatedRanges","lastRange","range","join","cc","rewritten","global","multiline","extractSourceSpans","node","isPreformatted","nocode","chunks","spans","k","walk","type","nodeType","className","child","firstChild","nextSibling","nodeName","toLowerCase","text","nodeValue","sourceCode","appendDecorations","sourceNode","basePos","langHandler","job","pre","langExtension","numberLines","decorations","apply","createSimpleLexer","shortcutStylePatterns","fallthroughStylePatterns","tokenizer","shortcuts","allPatterns","concat","allRegexs","regexKeys","patternParts","shortcutChars","hasOwnProperty","decorate","pos","tokens","styleCache","ti","nTokens","isEmbedded","token","style","nPatterns","embeddedSource","embeddedSourceStart","embeddedSourceEnd","lang","tokenStart","indexOf","langHandlerForExtension","sourceDecorator","options","hc","regexLiterals","types","regexAny","regexExcls","keywords","punctuation","startLineNum","lineBreak","document","ownerDocument","li","createElement","appendChild","listItems","breakAfter","lineEndNode","parentNode","parent","copiedListItem","breakLeftOf","limit","copy","rightSide","cloneNode","parentClone","next","sibling","firstLine","index","tail","insertBefore","createTextNode","removeChild","setAttribute","ol","offset","registerLangHandler","handler","fileExtensions","ext","console","extension","applyDecorator","opt_langExtension","decPos","sourceAndSpans","isIE8OrEarlier","exec","navigator","userAgent","newlineRe","sourceLength","sourceIndex","nSpans","spanIndex","decorationIndex","nDecorations","startPos","startDec","oldDisplay","display","styledText","span","spanEnd","decEnd","textNode","replaceChild","$prettyPrintOne","sourceCodeHtml","opt_numberLines","nl","container","innerHTML","$prettyPrint","opt_whenDone","opt_root","root","body","doc","byTagName","tn","getElementsByTagName","codeSegments","elements","j","clock","Date","now","langExtensionRe","prettyPrintRe","prettyPrintedRe","preformattedTagNameRe","codeRe","preCodeXmpRe","EMPTY","doWork","endTime","Infinity","cs","attrs","preceder","previousSibling","nt","value","_","name","currentStyle","preformatted","lineNums","nested","tagName","wrapper","element","undefined","defaultView","whitespace","getComputedStyle","getPropertyValue","setTimeout","window","JSCRIPT_KEYWORDS","SH_KEYWORDS","hashComments","cStyleComments","multiLineStrings","verbatimStrings","tripleQuotedStrings","multilineStrings","PR_ATTRIB_NAME","PR_DECLARATION","PR_KEYWORD","PR_NOCODE","PR_TAG","prettyPrintOne","prettyPrint","define","addEventListener","slice","querySelectorAll","map","tooltipTriggerEl","bootstrap","Tooltip","copyButton","getElementById","originalTitle","getAttribute","isNewTitle","bsTooltip","clipboard","writeText","textContent","log","getInstance","_fixTitle","show","error"],"mappings":"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","file":"admin.script.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n","// code prettify enable\r\nimport 'code-prettify';\r\nwindow.addEventListener('load' , PR.prettyPrint , false)\r\n\r\n// enable bootstrap tooltips\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    let tooltipTriggerList = [].slice.call(document.querySelectorAll(\"[data-bs-toggle=\\'tooltip\\']\"));\r\n    let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\r\n        return new bootstrap.Tooltip(tooltipTriggerEl);\r\n    });\r\n});\r\n\r\n\r\n// copy to clipboard button\r\nlet copyButton = document.getElementById(\"copyButton\");\r\nlet originalTitle = copyButton.getAttribute('title');\r\nlet isNewTitle = false;\r\ncopyButton.addEventListener('click', () => {\r\n    try {\r\n        const element = document.getElementById(\"copyText\");\r\n        navigator.clipboard.writeText(element.textContent);\r\n        console.log(\"Text copied to clipboard!\");\r\n        // Optional: Display a success message to the user\r\n\r\n\r\n        // change tooltip title\r\n        if (isNewTitle) {\r\n            copyButton.setAttribute('data-bs-original-title', originalTitle);\r\n        } else {\r\n            copyButton.setAttribute('data-bs-original-title', 'Successfully Copied to Clipboard');\r\n        }\r\n\r\n        let bsTooltip = bootstrap.Tooltip.getInstance(copyButton);\r\n        bsTooltip._fixTitle();\r\n        bsTooltip.show(); // Show the updated tooltip\r\n\r\n        isNewTitle = !isNewTitle; // Toggle the state\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to copy to clipboard:\", error);\r\n        // Optional: Display an error message to the user\r\n    }\r\n})\r\n\r\n// code prettify enable\r\n"]}